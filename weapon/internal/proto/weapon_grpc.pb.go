// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: weapon/proto/weapon.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeaponServiceClient is the client API for WeaponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeaponServiceClient interface {
	CreateWeapon(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ListWeapons(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetWeapon(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Weapon, error)
	GetWeaponByCategory(ctx context.Context, in *GetByCategoryRequest, opts ...grpc.CallOption) (*GetListResponse, error)
}

type weaponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeaponServiceClient(cc grpc.ClientConnInterface) WeaponServiceClient {
	return &weaponServiceClient{cc}
}

func (c *weaponServiceClient) CreateWeapon(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.WeaponService/CreateWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaponServiceClient) ListWeapons(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/proto.WeaponService/ListWeapons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaponServiceClient) GetWeapon(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Weapon, error) {
	out := new(Weapon)
	err := c.cc.Invoke(ctx, "/proto.WeaponService/GetWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaponServiceClient) GetWeaponByCategory(ctx context.Context, in *GetByCategoryRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/proto.WeaponService/GetWeaponByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeaponServiceServer is the server API for WeaponService service.
// All implementations must embed UnimplementedWeaponServiceServer
// for forward compatibility
type WeaponServiceServer interface {
	CreateWeapon(context.Context, *CreateRequest) (*CreateResponse, error)
	ListWeapons(context.Context, *GetListRequest) (*GetListResponse, error)
	GetWeapon(context.Context, *GetRequest) (*Weapon, error)
	GetWeaponByCategory(context.Context, *GetByCategoryRequest) (*GetListResponse, error)
	mustEmbedUnimplementedWeaponServiceServer()
}

// UnimplementedWeaponServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWeaponServiceServer struct {
}

func (UnimplementedWeaponServiceServer) CreateWeapon(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWeapon not implemented")
}
func (UnimplementedWeaponServiceServer) ListWeapons(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWeapons not implemented")
}
func (UnimplementedWeaponServiceServer) GetWeapon(context.Context, *GetRequest) (*Weapon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeapon not implemented")
}
func (UnimplementedWeaponServiceServer) GetWeaponByCategory(context.Context, *GetByCategoryRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeaponByCategory not implemented")
}
func (UnimplementedWeaponServiceServer) mustEmbedUnimplementedWeaponServiceServer() {}

// UnsafeWeaponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeaponServiceServer will
// result in compilation errors.
type UnsafeWeaponServiceServer interface {
	mustEmbedUnimplementedWeaponServiceServer()
}

func RegisterWeaponServiceServer(s grpc.ServiceRegistrar, srv WeaponServiceServer) {
	s.RegisterService(&WeaponService_ServiceDesc, srv)
}

func _WeaponService_CreateWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServiceServer).CreateWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WeaponService/CreateWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServiceServer).CreateWeapon(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaponService_ListWeapons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServiceServer).ListWeapons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WeaponService/ListWeapons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServiceServer).ListWeapons(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaponService_GetWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServiceServer).GetWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WeaponService/GetWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServiceServer).GetWeapon(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaponService_GetWeaponByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServiceServer).GetWeaponByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WeaponService/GetWeaponByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServiceServer).GetWeaponByCategory(ctx, req.(*GetByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeaponService_ServiceDesc is the grpc.ServiceDesc for WeaponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeaponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WeaponService",
	HandlerType: (*WeaponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWeapon",
			Handler:    _WeaponService_CreateWeapon_Handler,
		},
		{
			MethodName: "ListWeapons",
			Handler:    _WeaponService_ListWeapons_Handler,
		},
		{
			MethodName: "GetWeapon",
			Handler:    _WeaponService_GetWeapon_Handler,
		},
		{
			MethodName: "GetWeaponByCategory",
			Handler:    _WeaponService_GetWeaponByCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weapon/proto/weapon.proto",
}
