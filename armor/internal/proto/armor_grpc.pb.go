// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: armor/proto/armor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArmorServiceClient is the client API for ArmorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArmorServiceClient interface {
	CreateArmor(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ListArmors(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetByCategory(ctx context.Context, in *GetByCategoryRequest, opts ...grpc.CallOption) (*GetListResponse, error)
}

type armorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArmorServiceClient(cc grpc.ClientConnInterface) ArmorServiceClient {
	return &armorServiceClient{cc}
}

func (c *armorServiceClient) CreateArmor(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.ArmorService/CreateArmor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *armorServiceClient) ListArmors(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/proto.ArmorService/ListArmors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *armorServiceClient) GetByCategory(ctx context.Context, in *GetByCategoryRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/proto.ArmorService/GetByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArmorServiceServer is the server API for ArmorService service.
// All implementations must embed UnimplementedArmorServiceServer
// for forward compatibility
type ArmorServiceServer interface {
	CreateArmor(context.Context, *CreateRequest) (*CreateResponse, error)
	ListArmors(context.Context, *GetListRequest) (*GetListResponse, error)
	GetByCategory(context.Context, *GetByCategoryRequest) (*GetListResponse, error)
	mustEmbedUnimplementedArmorServiceServer()
}

// UnimplementedArmorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArmorServiceServer struct {
}

func (UnimplementedArmorServiceServer) CreateArmor(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArmor not implemented")
}
func (UnimplementedArmorServiceServer) ListArmors(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArmors not implemented")
}
func (UnimplementedArmorServiceServer) GetByCategory(context.Context, *GetByCategoryRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCategory not implemented")
}
func (UnimplementedArmorServiceServer) mustEmbedUnimplementedArmorServiceServer() {}

// UnsafeArmorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArmorServiceServer will
// result in compilation errors.
type UnsafeArmorServiceServer interface {
	mustEmbedUnimplementedArmorServiceServer()
}

func RegisterArmorServiceServer(s grpc.ServiceRegistrar, srv ArmorServiceServer) {
	s.RegisterService(&ArmorService_ServiceDesc, srv)
}

func _ArmorService_CreateArmor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArmorServiceServer).CreateArmor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ArmorService/CreateArmor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArmorServiceServer).CreateArmor(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArmorService_ListArmors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArmorServiceServer).ListArmors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ArmorService/ListArmors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArmorServiceServer).ListArmors(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArmorService_GetByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArmorServiceServer).GetByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ArmorService/GetByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArmorServiceServer).GetByCategory(ctx, req.(*GetByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArmorService_ServiceDesc is the grpc.ServiceDesc for ArmorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArmorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ArmorService",
	HandlerType: (*ArmorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArmor",
			Handler:    _ArmorService_CreateArmor_Handler,
		},
		{
			MethodName: "ListArmors",
			Handler:    _ArmorService_ListArmors_Handler,
		},
		{
			MethodName: "GetByCategory",
			Handler:    _ArmorService_GetByCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "armor/proto/armor.proto",
}
