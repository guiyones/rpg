// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: shield/proto/shield.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShieldServiceClient is the client API for ShieldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShieldServiceClient interface {
	CreateShield(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ListShields(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*Shield, error)
}

type shieldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShieldServiceClient(cc grpc.ClientConnInterface) ShieldServiceClient {
	return &shieldServiceClient{cc}
}

func (c *shieldServiceClient) CreateShield(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.ShieldService/CreateShield", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) ListShields(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/proto.ShieldService/ListShields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldServiceClient) GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*Shield, error) {
	out := new(Shield)
	err := c.cc.Invoke(ctx, "/proto.ShieldService/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShieldServiceServer is the server API for ShieldService service.
// All implementations must embed UnimplementedShieldServiceServer
// for forward compatibility
type ShieldServiceServer interface {
	CreateShield(context.Context, *CreateRequest) (*CreateResponse, error)
	ListShields(context.Context, *GetListRequest) (*GetListResponse, error)
	GetByName(context.Context, *GetByNameRequest) (*Shield, error)
	mustEmbedUnimplementedShieldServiceServer()
}

// UnimplementedShieldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShieldServiceServer struct {
}

func (UnimplementedShieldServiceServer) CreateShield(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShield not implemented")
}
func (UnimplementedShieldServiceServer) ListShields(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShields not implemented")
}
func (UnimplementedShieldServiceServer) GetByName(context.Context, *GetByNameRequest) (*Shield, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedShieldServiceServer) mustEmbedUnimplementedShieldServiceServer() {}

// UnsafeShieldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShieldServiceServer will
// result in compilation errors.
type UnsafeShieldServiceServer interface {
	mustEmbedUnimplementedShieldServiceServer()
}

func RegisterShieldServiceServer(s grpc.ServiceRegistrar, srv ShieldServiceServer) {
	s.RegisterService(&ShieldService_ServiceDesc, srv)
}

func _ShieldService_CreateShield_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).CreateShield(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShieldService/CreateShield",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).CreateShield(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_ListShields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).ListShields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShieldService/ListShields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).ListShields(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShieldService/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldServiceServer).GetByName(ctx, req.(*GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShieldService_ServiceDesc is the grpc.ServiceDesc for ShieldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShieldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShieldService",
	HandlerType: (*ShieldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShield",
			Handler:    _ShieldService_CreateShield_Handler,
		},
		{
			MethodName: "ListShields",
			Handler:    _ShieldService_ListShields_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _ShieldService_GetByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shield/proto/shield.proto",
}
